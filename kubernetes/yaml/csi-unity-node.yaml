# This YAML defines all API objects to create RBAC roles for CSI node plugin
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-unity-node
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-unity-node
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csidrivers"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch", "update"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-unity-node
subjects:
  - kind: ServiceAccount
    name: csi-unity-node
    namespace: default
roleRef:
  kind: ClusterRole
  name: csi-unity-node
  apiGroup: rbac.authorization.k8s.io

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-unity-node
  namespace: default
spec:
  selector:
    matchLabels:
      app: csi-unity-node
  template:
    metadata:
      labels:
        app: csi-unity-node
    spec:
      serviceAccount: csi-unity-node
      hostNetwork: true
      containers:
      - name: driver-registrar
        image: quay.io/k8scsi/driver-registrar:v0.4.0
        args:
        - "--v=5"
        - "--csi-address=/csi/csi.sock"
        - "--kubelet-registration-path=/var/lib/kubelet/plugins/csi-unity/csi.sock"
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /csi
          name: socket-dir
        - mountPath: /registration
          name: registration-dir
      - name: csi-unity-node
        image: ciqihuo/csi-unity:1024
        args:
        - "--v=5"
        - "--endpoint=$(CSI_ENDPOINT)"
        - "--nodeid=$(KUBE_NODE_NAME)"
        env:
        - name: CSI_ENDPOINT
          value: unix:///csi/csi.sock
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: X_CSI_UNITY_AUTOPROBE
          value: "true"
        - name: X_CSI_UNITY_ENDPOINT
          value: 192.168.1.58
        - name: X_CSI_UNITY_USER
          value: admin
        - name: X_CSI_UNITY_PASSWORD
          value: Password123!
        - name: X_CSI_UNITY_INSECURE
          value: "true"
        imagePullPolicy: Always
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /csi
          name: socket-dir
        - mountPath: /var/lib/kubelet/pods
          mountPropagation: Bidirectional
          name: mountpoint-dir
      volumes:
      - hostPath:
          path: /var/lib/kubelet/plugins/csi-unity
          type: DirectoryOrCreate
        name: socket-dir
      - hostPath:
          path: /var/lib/kubelet/pods
          type: DirectoryOrCreate
        name: mountpoint-dir
      - hostPath:
          path: /var/lib/kubelet/plugins
          type: Directory
        name: registration-dir
